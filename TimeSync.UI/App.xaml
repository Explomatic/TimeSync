<Application x:Class="TimeSync.UI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:TimeSync.UI"
             xmlns:viewModels="clr-namespace:TimeSync.UI.ViewModel"
             xmlns:src="clr-namespace:TimeSync.Model;assembly=TimeSync.Model"
             xmlns:sw="clr-namespace:TimeSync.UI.WindowStyling"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
             StartupUri="View/MainWindow.xaml">
    <Application.Resources>
        <DataTemplate x:Key="ToolkitUserDataTemplate"  DataType="{x:Type src:ToolkitUser}">
            <StackPanel Orientation="Vertical">
                <TextBox Width="75" Margin="20,5,20,5" Text="{Binding Name}" VerticalAlignment="Center"/>
                <TextBox Width="250" Margin="20,5,20,5" Text="{Binding Password}" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>

        <!---red window brushes-->
        <!--<SolidColorBrush x:Key="WindowColor" Color="DarkRed"/> 
        <SolidColorBrush x:Key="WindowBackColor" Color="DarkRed"/> 
        <SolidColorBrush x:Key="WindowForeColor" Color="White"/> 
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="White"/> 
        <SolidColorBrush x:Key="WindowButtonColor" Color="OrangeRed"/> 
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="Orange"/> 
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkOrange"/>-->

        <!-- Brushes -->
        <!-- 2d3a6e even lighter -->
        <!--222b52 lighter-->
        <!-- 1c2444 nc background colour -->
        <!--111528 darker -->
        
        <!-- Window styling -->
        <SolidColorBrush x:Key="WindowBorderBrush" Color="White"/>
        <SolidColorBrush x:Key="WindowBrush" Color="#111528"/>
        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#111528"/>
        <SolidColorBrush x:Key="WindowFrameBackgroundBrush" Color="#111528" />
        <SolidColorBrush x:Key="WindowForegroundBrush" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowForegroundHighlightBrush" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowButtonBrush" Color="#111528"/>
        <SolidColorBrush x:Key="WindowButtonHoverBrush" Color="sc#0.31,0.52,0.39"/>
        <SolidColorBrush x:Key="WindowButtonPressedBrush" Color="sc#0.00,0.52,0.39"/>

        <Color x:Key="TextOrange">sc#0.95,0.15,0.0000</Color>
        <Color x:Key="LightOrange">#ea6402</Color>
        <Color x:Key="Orange">#c35302</Color>
        <Color x:Key="DarkOrange">#b04b02</Color>
        <Color x:Key="ButtonHoverColor">#b9c0e1</Color>

        <!--#828eca-->
        <!--#5969b8-->
        <!-- <SolidColorBrush x:Key="ButtonPressedBrush" Color="sc#0.00,0.52,0.39"/> -->
        <!-- <SolidColorBrush x:Key="ButtonHoverBrush" Color="sc#0.31,0.52,0.39"/> -->
        <SolidColorBrush x:Key="ButtonPressedBrush" Color="#5969b8"/>
        <SolidColorBrush x:Key="ButtonHoverBrush" Color="{DynamicResource ButtonHoverColor}"/>
        <SolidColorBrush x:Key="ButtonDisabledBrush" Color="#FF6D6D6D"/>
        <SolidColorBrush x:Key="TextBrushOange" Color="sc#0.95,0.15,0.0000"/>
        <SolidColorBrush x:Key="TitleTextBrush" Color="White"/>
        
        <!-- ScrollBar -->
        <!-- <SolidColorBrush x:Key="StandardBorderBrush" Color="DarkGray" /> -->
        <!-- <SolidColorBrush x:Key="StandardBrush" Color="LightGray" /> -->
        <SolidColorBrush x:Key="ScrollBarBorderColor" Color="{StaticResource Orange}" />
        <SolidColorBrush x:Key="ScrollBarFillColor" Color="{StaticResource Orange}" />
        <SolidColorBrush x:Key="ScrollBarPressedColor" Color="{StaticResource DarkOrange}" />
        <SolidColorBrush x:Key="ScrollBarHoverColor" Color="{StaticResource LightOrange}" />
        <!-- <SolidColorBrush x:Key="ScrollBarBackgroundColor" Color="{StaticResource DarkOrange}"/> -->
        <SolidColorBrush x:Key="ScrollBarBackgroundColor" Color="WhiteSmoke"/>
        <!--<SolidColorBrush x:Key="GlyphBrush" Color="333333" />-->

        <Style TargetType="Button" x:Key="BaseButtonStyle">
            <Setter Property="FontFamily" Value="Global User Interface"/>
            <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrushOange}" />
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" Value="{StaticResource ButtonPressedBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextBlock.Foreground" Value="{StaticResource ButtonDisabledBrush}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="SelectionButton" BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="30" />
            <Setter Property="Width" Value="40" />
        </Style>

        <Style TargetType="Button" x:Key="RegularButton" BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="MinHeight" Value="35"/>
            <Setter Property="MinWidth" Value="75"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5" BorderBrush="White" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF6D6D6D" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="MenuButton" BasedOn="{StaticResource BaseButtonStyle}"
               d:DataContext="{d:DesignInstance viewModels:HomePageViewModel}">
            <Style.Resources>
                <viewModels:StringToSolidColorBrushConverter x:Key="StringToSolidColorBrushConverter"/>
            </Style.Resources>
            <Setter Property="Width" Value="150" />
            <Setter Property="Height" Value="50" />
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Background">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource StringToSolidColorBrushConverter}">
                        <Binding RelativeSource="{RelativeSource Self}"/>
                        <Binding Path="CurrentPage.Title" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextBlock.Foreground" Value="#FF6D6D6D" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Label">
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000" />
        </Style>

        <Style TargetType="Label" x:Key="SelectionLabel">
            <Setter Property="FontFamily" Value="Global User Interface"/>
            <Setter Property="TextBlock.Foreground" Value="sc#0.95,0.15,0.0000" />
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>            
        </Style>

        <Style TargetType="Label" x:Key="TextLabel">
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000" />
            <Setter Property="FontSize" Value="16"/>
        </Style>

        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000"/>
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>



        <!--The window template and it's components -->

        <sw:WindowMinimizeCommand x:Key="MinimizeCommand" />
        <sw:WindowMaximizeCommand x:Key="MaximizeCommand" />
        <sw:WindowCloseCommand x:Key="CloseCommand" />

        <Style TargetType="{x:Type Button}" x:Key="WindowButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForegroundBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonHoverBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForegroundHighlightBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonPressedBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="DeleteButton" BasedOn="{StaticResource RegularButton}">
            <Setter Property="Content">
                <Setter.Value>
                    <Grid Width="15" Height="15">
                        <Path Margin="3"
                              Stroke="#FFF"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Square"
                              StrokeEndLineCap="Square"
                              Stretch="Uniform"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
                            <Path.Data>
                                <PathGeometry>
                                    <PathGeometry.Figures>
                                        <PathFigure StartPoint="0,0">
                                            <LineSegment Point="25,25"/>
                                        </PathFigure>
                                        <PathFigure StartPoint="0,25">
                                            <LineSegment Point="25,0"/>
                                        </PathFigure>
                                    </PathGeometry.Figures>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LineButtonUpStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid Margin="1" Height="18" >
                            <Path Stretch="None"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" 
                                  Name="Path"  
                                  Fill="{StaticResource StandardBrush}"
                                  Data="M 0 0 L 4 -8 L 8 0 Z"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Path" 
                                        Property="Fill"
                                        Value="{StaticResource ScrollBarHoverColor}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Path" 
                                        Property="Fill"
                                        Value="{StaticResource ScrollBarPressedColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LineButtonDownStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid Margin="1" Height="18" >
                            <Path Stretch="None" 
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" 
                                  Name="Path" 
                                  Fill="{StaticResource StandardBrush}"
                                  Data="M 0 0 L 4 8 L 8 0 Z" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Path" 
                                        Property="Fill"
                                        Value="{StaticResource ScrollBarHoverColor}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Path" 
                                        Property="Fill"
                                        Value="{StaticResource ScrollBarPressedColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" -->
        <!-- Stroke="{StaticResource StandardBorderBrush} -->
        <Style x:Key="VerticalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="IsTabStop"
                    Value="False"/>
            <Setter Property="Focusable"
                    Value="False"/>
            <!-- <Setter Property="Margin" -->
            <!--         Value="1,0,1,0" /> -->
            <Setter Property="BorderBrush" Value="{StaticResource ScrollBarBorderColor}" />
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Name="ellipse"
                                   Width="10"
                                   Stroke="{StaticResource ScrollBarBorderColor}"
                                   Fill="{StaticResource ScrollBarFillColor}"
                                   RadiusX="0" 
                                   RadiusY="0"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="ellipse"
                                        Property="Fill" Value="{StaticResource ScrollBarHoverColor}"/>
                                <Setter TargetName="ellipse"
                                        Property="Stroke" Value="{StaticResource ScrollBarHoverColor}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="ellipse"
                                        Property="Fill" Value="{StaticResource ScrollBarPressedColor}"/>
                                <Setter TargetName="ellipse"
                                        Property="Stroke" Value="{StaticResource ScrollBarPressedColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <!-- <Grid Background="{StaticResource WindowBackColor}"> -->
            <Grid Background="{StaticResource ScrollBarBackgroundColor}">
                <Grid.RowDefinitions>
                    <!--<RowDefinition MaxHeight="18"/>-->
                    <RowDefinition Height="*"/>
                    <!--<RowDefinition MaxHeight="18"/>-->
                </Grid.RowDefinitions>
                <!--<Grid.Background>-->

                <!--<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Offset="0" Color="White"></GradientStop>
                        <GradientStop Offset="1" Color="Blue"></GradientStop>
                    </LinearGradientBrush>-->
                <!--</Grid.Background>-->
                <!--<RepeatButton Grid.Row="0" Height="18"
                              Style="{StaticResource LineButtonUpStyle}"
                              Command="ScrollBar.LineUpCommand">
                </RepeatButton>-->
                <!--<Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">-->
                <Track Name="PART_Track" IsDirectionReversed="True" Margin="0,0,0,0" >
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageUpCommand"
                                      Style="{StaticResource ScrollBarPageButtonStyle}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource VerticalScrollBarThumbStyle}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageDownCommand"
                                      Style="{StaticResource ScrollBarPageButtonStyle}"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <!--<RepeatButton Grid.Row="2" Height="18" 
                              Style="{StaticResource LineButtonDownStyle}"
                              Command="ScrollBar.LineDownCommand">
                </RepeatButton>-->
            </Grid>
        </ControlTemplate>

        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="10"/>
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
            <Grid Background="{StaticResource WindowBackgroundBrush}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Grid.Row="0" BorderBrush="White" BorderThickness="0.75 0.75 0.75 0">
                        <Grid Margin="5,0,5,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="75"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0" Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{Binding PageTitle}" Foreground="White" />
                            <Label Grid.Column="0"                                            
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                                
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                                <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                          
                                   Width="16"                                            
                                   sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                            
                                   sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                            </Label>
                            <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                   
                               HorizontalContentAlignment="Center" 
                               VerticalContentAlignment="Center" 
                               HorizontalAlignment="Stretch" 
                               VerticalAlignment="Stretch" 
                               Foreground="{StaticResource WindowForegroundBrush}"                                            
                               FontSize="16" 
                               sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.RightButtonShow="true">
                            </Label>
                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">_</Button>
                                <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                                    &#x1f5d6;
                                    <!--<Grid Width="31" Height="25">
                                    <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                          Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" StrokeThickness="2"  />
                                </Grid>-->
                                </Button>
                                <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                                    <Grid Width="15" Height="15">
                                        <Path Margin="3"
                                          Stroke="{StaticResource WindowForegroundHighlightBrush}"
                                          StrokeThickness="1.5"
                                          StrokeStartLineCap="Square"
                                          StrokeEndLineCap="Square"
                                          Stretch="Uniform"
                                          VerticalAlignment="Bottom"
                                          HorizontalAlignment="Center">
                                            <Path.Data>
                                                <PathGeometry>
                                                    <PathGeometry.Figures>
                                                        <PathFigure StartPoint="0,0">
                                                            <LineSegment Point="25,25"/>
                                                        </PathFigure>
                                                        <PathFigure StartPoint="0,25">
                                                            <LineSegment Point="25,0"/>
                                                        </PathFigure>
                                                    </PathGeometry.Figures>
                                                </PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </Grid>
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent"/>
                            </AdornerDecorator>
                            <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                        </Grid>
                    </Border>
                </Grid>
                <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="CustomWindow" TargetType="{x:Type Window}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="MinWidth" Value="450"/>
            <Setter Property="MinHeight" Value="230"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="BorderThickness" Value="0.75"/>

            <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
        </Style>
    </Application.Resources>
</Application>