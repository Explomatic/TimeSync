<Application x:Class="TimeSync.UI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:TimeSync.UI"
             xmlns:viewModels="clr-namespace:TimeSync.UI.ViewModel"
             xmlns:src="clr-namespace:TimeSync.Model;assembly=TimeSync.Model"
             xmlns:sw="clr-namespace:TimeSync.UI.WindowStyling"  
             StartupUri="View/MainWindow.xaml">
    <Application.Resources>
        <DataTemplate x:Key="ToolkitUserDataTemplate"  DataType="{x:Type src:ToolkitUser}">
            <StackPanel Orientation="Vertical">
                <TextBox Width="75" Margin="20,5,20,5" Text="{Binding Name}" VerticalAlignment="Center"/>
                <TextBox Width="250" Margin="20,5,20,5" Text="{Binding Password}" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>
        
        <DataTemplate x:Key="ToolkitDataTemplate"  DataType="{x:Type src:Toolkit}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="325"/>
                    <ColumnDefinition Width="100"/>
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Width="80" Margin="5,5,5,5" Text="{Binding CustomerName}" VerticalAlignment="Center"/>
                <TextBox Grid.Column="1"  Width="305" Margin="15,5,5,5" Text="{Binding Url}" VerticalAlignment="Center"/>
                <CheckBox Grid.Column="2" IsChecked="{Binding GetTeamsWithoutSLA}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Grid>
        </DataTemplate>

        <Style TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="sc#0.31,0.52,0.39"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" Value="sc#0.00,0.52,0.39"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Label">
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000"></Setter>
        </Style>
        
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000"/> 
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        
        <Style TargetType="Button" x:Key="RegularButton">
            <Setter Property="Background" Value="sc#0.11,0.11,0.15"/>
            <Setter Property="Foreground" Value="sc#0.95,0.15,0.0000"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="sc#0.31,0.52,0.39"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" Value="sc#0.00,0.52,0.39"/>
                </Trigger>
            </Style.Triggers>
        </Style>



<!-- Window styling -->

        <SolidColorBrush x:Key="WindowColor" Color="sc#0.11,0.11,0.15"/>
        <SolidColorBrush x:Key="WindowBackColor" Color="sc#0.11,0.11,0.15"/>
        <SolidColorBrush x:Key="WindowForeColor" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowButtonColor" Color="sc#0.11,0.11,0.15"/>
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="sc#0.31,0.52,0.39"/>
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="sc#0.00,0.52,0.39"/>

        <!---red window brushes-->
        <!--<SolidColorBrush x:Key="WindowColor" Color="DarkRed"/> 
        <SolidColorBrush x:Key="WindowBackColor" Color="DarkRed"/> 
        <SolidColorBrush x:Key="WindowForeColor" Color="White"/> 
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="White"/> 
        <SolidColorBrush x:Key="WindowButtonColor" Color="OrangeRed"/> 
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="Orange"/> 
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkOrange"/>-->

        <!--The window template and it's components -->

        <sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
        <sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
        <sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>

        <Style TargetType="{x:Type Button}" x:Key="WindowButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
        </Style>


        <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
            <Grid Background="{StaticResource WindowBackColor}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Margin="5,0,5,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="75"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0"                                            
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                                
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                            <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                          
                                   Width="16"                                            
                                   sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                            
                                   sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                        </Label>
                        <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                   
                               HorizontalContentAlignment="Center" 
                               VerticalContentAlignment="Center" 
                               HorizontalAlignment="Stretch" 
                               VerticalAlignment="Stretch" 
                               Foreground="{StaticResource WindowForeColor}"                                            
                               FontSize="16" 
                               sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.RightButtonShow="true">
                        </Label>
                        <StackPanel Grid.Column="2" Orientation="Horizontal">
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">_</Button>
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                                &#x1f5d6;
                                <!--<Grid Width="31" Height="25">
                                    <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                          Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" StrokeThickness="2"  />
                                </Grid>-->
                            </Button>
                            <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                                <Grid Width="15" Height="15">
                                    <Path Margin="3"

                                          Stroke="#FFF"

                                          StrokeThickness="1.5"

                                          StrokeStartLineCap="Square"

                                          StrokeEndLineCap="Square"

                                          Stretch="Uniform"

                                          VerticalAlignment="Bottom"

                                          HorizontalAlignment="Center">
                                        <Path.Data>
                                    <PathGeometry>
                                        <PathGeometry.Figures>
                                            <PathFigure StartPoint="0,0">
                                                <LineSegment Point="25,25"/>
                                            </PathFigure>
                                            <PathFigure StartPoint="0,25">
                                                <LineSegment Point="25,0"/>
                                            </PathFigure>
                                        </PathGeometry.Figures>
                                    </PathGeometry>
                                </Path.Data>
                                </Path>
                                </Grid>
                            </Button>
                        </StackPanel>
                    </Grid>
                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent"/>
                            </AdornerDecorator>
                            <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                        </Grid>
                    </Border>
                </Grid>
                <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>






        <Style x:Key="CustomWindow" TargetType="{x:Type Window}">
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="MinWidth" Value="450"/>
            <Setter Property="MinHeight" Value="230"/>
            <!--CaptionHeight + ResizeBorderThickness * 2-->

            <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
        </Style>

    </Application.Resources>
</Application>
